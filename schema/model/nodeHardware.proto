/* ZooBC zoobc-schema
*
* Copyright Â© 2020 Quasisoft Limited - Hong Kong
*
* ZooBC is architected by Roberto Capodieci & Barton Johnston
*             contact us at roberto.capodieci[at]blockchainzoo.com
*             and barton.johnston[at]blockchainzoo.com
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE. */
syntax="proto3";

package model;

option go_package = "github.com/zoobc/zoobc-core/common/model";

message GetNodeHardwareResponse {
    NodeHardware NodeHardware = 1;
}

message GetNodeHardwareRequest {
}

// Get Node Current Time Based on UTC
message GetNodeTimeResponse {
    int64 NodeTime = 1 [ jstype = JS_STRING ];
}

message NodeHardware {
    repeated CPUInformation CPUInformation = 1;
    MemoryInformation MemoryInformation = 2;
    StorageInformation StorageInformation = 3;
    HostInformation HostInformation = 4;
}

message CPUInformation {
   string Family = 1;
   int32 CPUIndex = 2;
   string Model = 3;
   string ModelName = 4;
   string VendorId = 5;
   double Mhz = 6;
   int32 CacheSize = 7;
   double UsedPercent = 8;
   string CoreID = 9;
   int32 Cores = 10;
}

message HostInformation {
    uint64 Uptime = 1;
    string OS = 2;
    string Platform = 3;
    string PlatformFamily = 4;
    string PlatformVersion = 5;
    uint64 NumberOfRunningProcess = 6;
    string HostID = 7;
    string HostName = 8;
}

message MemoryInformation {
    uint64 Total = 1;
    // This is the kernel's notion of free memory; RAM chips whose bits nobody
    // cares about the value of right now. For a human consumable number,
    // Available is what you really want.
    uint64 Free = 2;
    // RAM available for programs to allocate
    uint64 Available = 3;
    uint64 Used = 4;
    double UsedPercent = 5;
}

message StorageInformation {
    string FsType = 1;
    uint64 Total = 2;
    uint64 Free = 3;
    uint64 Used = 4;
    double UsedPercent = 5;
}