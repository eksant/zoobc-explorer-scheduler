/* ZooBC zoobc-schema
*
* Copyright Â© 2020 Quasisoft Limited - Hong Kong
*
* ZooBC is architected by Roberto Capodieci & Barton Johnston
*             contact us at roberto.capodieci[at]blockchainzoo.com
*             and barton.johnston[at]blockchainzoo.com
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE. */
syntax="proto3";

package model;

option go_package = "github.com/zoobc/zoobc-core/common/model";

import "model/node.proto";

message Peer {
    Node Info     = 1;
    uint32  LastInboundRequest = 2;
    string BlacklistingCause  = 3;
     // BlacklistingTime is timestamp when a peer start in list of blacklist peers
    uint64 BlacklistingTime   = 4 [jstype = JS_STRING];
    // ResolvingTime is timestamp when a peer start in list of resolved peers 
    int64 ResolvingTime = 5 [jstype = JS_STRING];
    int32 connectionAttempted = 6;
    // UnresolvingTime is timestamp when a peer start in list of unresolved peers 
    int64 UnresolvingTime = 7 [jstype = JS_STRING];
}

message PeerBasicResponse {
    bool Success = 1;
    string Error = 2;
}

message GetPeerInfoRequest {}

message GetPeerInfoResponse {
    Node HostInfo = 1;
}

message GetMorePeersResponse {
    repeated Node Peers = 1;
}
  
message SendPeersRequest {
    repeated Node Peers = 1;
}
