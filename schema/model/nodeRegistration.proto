/* ZooBC zoobc-schema
*
* Copyright Â© 2020 Quasisoft Limited - Hong Kong
*
* ZooBC is architected by Roberto Capodieci & Barton Johnston
*             contact us at roberto.capodieci[at]blockchainzoo.com
*             and barton.johnston[at]blockchainzoo.com
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE. */
syntax="proto3";

package model;
option go_package = "github.com/zoobc/zoobc-core/common/model";

import "model/pagination.proto";
import "model/nodeAddressInfo.proto";

message NodeRegistration {
    int64   NodeID = 1 [jstype = JS_STRING];
    bytes   NodePublicKey = 2;
    bytes   AccountAddress = 3;
    uint32  RegistrationHeight = 4;
    int64   LockedBalance = 5 [jstype = JS_STRING];
    uint32  RegistrationStatus = 6;
    bool    Latest = 7;
    uint32  Height = 8;
    NodeAddressInfo NodeAddressInfo = 9;
}

// GetNodeRegisterRequest create request to get a list of node registry
message GetNodeRegistrationsRequest {
    /* Fetch Node Registries based on queue status 
        2 : will retrieve node registries that have been deleted
        1 : will retrieve node registries that still pending
        0: will retrieve node registries that already registered*/
    repeated uint32 RegistrationStatuses = 1;
    // Fetch Node Registries when registration height is greater than or equal to
    uint32 MinRegistrationHeight = 2;
    // Fetch Node Registries when registration height is less than or equal to
    uint32 MaxRegistrationHeight = 3;
    // Fetch Node Registries based on Pagination field
    Pagination Pagination = 4;
}

message GetNodeRegistrationsResponse {
    // Number of node registry in total
    uint64 Total = 1 [jstype = JS_STRING];
    // NodeRegistrations list of NodeRegistration
    repeated NodeRegistration NodeRegistrations = 2;
}

// GetNodeRegistrationRequest create request for single node register
message GetNodeRegistrationRequest {
    bytes   NodePublicKey = 1;
    bytes   AccountAddress = 2;
    uint32  RegistrationHeight = 3;
}

message GetNodeRegistrationResponse {
    NodeRegistration NodeRegistration = 1;
}

enum NodeRegistrationState {
    // NodeRegistered 'registred' node status (= 0): a node in node registry with this status is registered
    NodeRegistered = 0;
    // NodeQueued 'queued' node status (= 1): a node in node registry with this status is queued, or 'pending registered'
    NodeQueued = 1;
    // NodeDeleted 'deleted' node status (= 2): a node in node registry with this status is marked as deleted
    NodeDeleted = 2;
}

// NodeAdmissionTimestamp represent the timestamp for next node admission
message NodeAdmissionTimestamp {
    int64 Timestamp = 1 [ jstype = JS_STRING ];
    uint32 BlockHeight = 2;
    bool Latest = 3;
}

// GetNodeRegistrationsByNodePublicKeys create request to get a list of node registry by a list of NodePublicKey
message GetNodeRegistrationsByNodePublicKeysRequest {
    repeated bytes NodePublicKeys = 1;
    // Fetch Node Registries based on Pagination field
    Pagination Pagination = 2;
}

message GetNodeRegistrationsByNodePublicKeysResponse {
    // Number of node registry in total
    uint64 Total = 1 [jstype = JS_STRING];
    // NodeRegistrations list of NodeRegistration
    repeated NodeRegistration NodeRegistrations = 2;
}

message GetPendingNodeRegistrationsRequest{
    uint32 Limit = 1;
}

message GetPendingNodeRegistrationsResponse{
    repeated NodeRegistration NodeRegistrations = 1;
}

message GetMyNodePublicKeyResponse {
    bytes NodePublicKey = 1;
}