/* ZooBC zoobc-schema
*
* Copyright Â© 2020 Quasisoft Limited - Hong Kong
*
* ZooBC is architected by Roberto Capodieci & Barton Johnston
*             contact us at roberto.capodieci[at]blockchainzoo.com
*             and barton.johnston[at]blockchainzoo.com
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE. */
syntax="proto3";

package model;
option go_package = "github.com/zoobc/zoobc-core/common/model";

import "model/pagination.proto";
import "model/escrow.proto";
// Mempool represent the mempool data structure stored in the database
message MempoolTransaction {
    int64 ID = 1 [jstype = JS_STRING];
    uint32 BlockHeight = 2;
    int64 FeePerByte = 3 [jstype = JS_STRING];
    int64 ArrivalTimestamp = 4 [jstype = JS_STRING];
    bytes TransactionBytes = 5;
    bytes SenderAccountAddress = 6;
    bytes RecipientAccountAddress = 7;
    Escrow Escrow = 8;
}

message GetMempoolTransactionRequest {
    // Fetch Mempool Transaction by its TransactionBytes
    int64 ID = 1 [jstype = JS_STRING];
}
message GetMempoolTransactionResponse {
    MempoolTransaction transaction = 1;
}

message GetMempoolTransactionsRequest {
    // Fetch Mempool transactions from arrival timestamp start from n
    int64 timestampStart = 1 [jstype = JS_STRING];
    // Fetch Mempool transactions to arrival timestamp end until n
    int64 timestampEnd = 2 [jstype = JS_STRING];
    // SenderAddress and RecipientAddress
    bytes address = 3;
    Pagination Pagination = 4;
}

message GetMempoolTransactionsResponse {
    uint64 Total = 1;
    repeated MempoolTransaction MempoolTransactions = 2;
}
