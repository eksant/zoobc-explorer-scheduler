/* ZooBC zoobc-schema
*
* Copyright Â© 2020 Quasisoft Limited - Hong Kong
*
* ZooBC is architected by Roberto Capodieci & Barton Johnston
*             contact us at roberto.capodieci[at]blockchainzoo.com
*             and barton.johnston[at]blockchainzoo.com
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE. */
syntax="proto3";

package service;

option go_package = "github.com/zoobc/zoobc-core/common/service";

import "model/multiSignature.proto";
import "google/api/annotations.proto";

// MultisigService represent request on Blockchain's multisig component such as pending_transaction, pending_signatures, and multisig_info 
service MultisigService {
    rpc GetPendingTransactions(model.GetPendingTransactionsRequest) returns (model.GetPendingTransactionsResponse) {
        option (google.api.http) = {
            get: "/v1/multisig/GetPendingTransactions"
        };
    }

    rpc GetPendingTransactionDetailByTransactionHash(model.GetPendingTransactionDetailByTransactionHashRequest) returns (model.GetPendingTransactionDetailByTransactionHashResponse) {
        option (google.api.http) = {
            get: "/v1/multisig/GetPendingTransactionDetailByTransactionHash"
        };
    }

    rpc GetMultisignatureInfo(model.GetMultisignatureInfoRequest) returns (model.GetMultisignatureInfoResponse) {
        option (google.api.http) = {
            get: "/v1/multisig/GetMultisignatureInfo"
        };
    }
    
    rpc GetMultisigAddressByParticipantAddress(model.GetMultisigAddressByParticipantAddressRequest) returns (model.GetMultisigAddressByParticipantAddressResponse) {
        option (google.api.http) = {
            get: "/v1/multisig/GetMultisigAddressByParticipantAddress"
        };
    }

    // GetPendingTransactionsByHeight fetch list of pending transactions (latest = 1 and latest = 0) within `fromHeight` and `toHeight`
    rpc GetPendingTransactionsByHeight(model.GetPendingTransactionsByHeightRequest) returns (model.GetPendingTransactionsByHeightResponse) {
        option (google.api.http) = {
            get: "/v1/multisig/GetPendingTransactionsByHeight"
        };
    }

    rpc GetMultisigAddressesByBlockHeightRange(model.GetMultisigAddressesByBlockHeightRangeRequest) returns (model.GetMultisigAddressesByBlockHeightRangeResponse) {
        option (google.api.http) = {
            get: "/v1/multisig/GetMultisigAddressesByBlockHeightRange"
        };
    }

    rpc GetParticipantsByMultisigAddresses(model.GetParticipantsByMultisigAddressesRequest) returns (model.GetParticipantsByMultisigAddressesResponse) {
        option (google.api.http) = {
            get: "/v1/multisig/GetParticipantsByMultisigAddresses"
        };
    }
}
