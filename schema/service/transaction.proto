/* ZooBC zoobc-schema
*
* Copyright Â© 2020 Quasisoft Limited - Hong Kong
*
* ZooBC is architected by Roberto Capodieci & Barton Johnston
*             contact us at roberto.capodieci[at]blockchainzoo.com
*             and barton.johnston[at]blockchainzoo.com
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE. */
syntax="proto3";

package service;

option go_package = "github.com/zoobc/zoobc-core/common/service";

import "model/transaction.proto";
import "google/api/annotations.proto";

// TransactionService represent request on db Transaction
service TransactionService {
    rpc GetTransactions(model.GetTransactionsRequest) returns (model.GetTransactionsResponse) {
        option (google.api.http) = {
            get: "/v1/transaction/GetTransactions"
        };
    }

    rpc GetTransaction(model.GetTransactionRequest) returns (model.Transaction) {
        option (google.api.http) = {
            get: "/v1/transaction/GetTransaction"
        };
    }

    rpc PostTransaction(model.PostTransactionRequest) returns (model.PostTransactionResponse) {
        option (google.api.http) = {
            post: "/v1/transaction/PostTransaction"
        };
    }
    
    rpc GetTransactionMinimumFee(model.GetTransactionMinimumFeeRequest) returns (model.GetTransactionMinimumFeeResponse) {
        option (google.api.http) = {
            post: "/v1/transaction/GetTransactionMinimumFee"
        };
    }

}
